import http from "http";
import fs from "fs";
import dotenv from "dotenv";
import express, { Request, Response, NextFunction } from "express";
import { MongoClient } from "mongodb";
import fileUpload from "express-fileupload"; 

dotenv.config({ path: ".env" });

const PORT = process.env.PORT || 3000;
const DB_NAME = "VallauriBar";
const connectionString = process.env.connectionStringLocal || "mongodb://localhost:27017";

const app = express();
const server = http.createServer(app);

let paginaErrore: string = "";

// Inizializza la pagina di errore
function init() {
    try {
        paginaErrore = fs.readFileSync("./static/error.html", "utf8");
    } catch (err) {
        paginaErrore = "<h1>Risorsa non trovata</h1>";
    }
}

server.listen(PORT, () => {
    init();
    console.log("Server in ascolto sulla porta " + PORT);
});

// Definizione di un'interfaccia per estendere Request
interface RequestWithDB extends Request {
    connessione?: MongoClient;
}

// Middleware di logging
app.use("/", (req, res, next) => {
    console.log("-----> " + req.method + " : " + req.originalUrl);
    next();
});

// Servire file statici dalla cartella "./static"
app.use("/", express.static("./static"));

// Impostazioni per il parsing del body
app.use("/", express.json({ limit: "10mb" }));
app.use("/", express.urlencoded({ extended: true, limit: "10mb" }));

// Gestione dei file binari con un limite di 10MB
app.use("/", fileUpload({ limits: { fileSize: 10 * 1024 * 1024 } })); // 10MB

// Middleware per loggare parametri GET e BODY
app.use("/", (req, res, next) => {
    if (Object.keys(req.query).length > 0) console.log("Parametri GET: ", req.query);
    if (Object.keys(req.body).length > 0) console.log("Parametri BODY:", req.body);
    next();
});

// Middleware per la connessione a MongoDB
app.use("/api/", async (req: RequestWithDB, res: Response, next: NextFunction) => {
    try {
        const client = new MongoClient(connectionString);
        await client.connect();
        req.connessione = client;
        next();
    } catch (err) {
        console.error("Errore di connessione al DB:", err);
        res.status(503).send("Errore di connessione al DB");
    }
});
